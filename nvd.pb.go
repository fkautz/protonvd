// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: nvd.proto

package protonvd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NvdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CveDataType         string                 `protobuf:"bytes,1,opt,name=cve_data_type,json=CVE_data_type,proto3" json:"cve_data_type,omitempty"`
	CveDataFormat       string                 `protobuf:"bytes,2,opt,name=cve_data_format,json=CVE_data_format,proto3" json:"cve_data_format,omitempty"`
	CveDataVersion      string                 `protobuf:"bytes,3,opt,name=cve_data_version,json=CVE_data_version,proto3" json:"cve_data_version,omitempty"`
	CveDataNumberOfCves int32                  `protobuf:"varint,4,opt,name=cve_data_number_of_cves,json=CVE_data_numberOfCVEs,proto3" json:"cve_data_number_of_cves,omitempty"`
	CveDataTimestamp    string                 `protobuf:"bytes,5,opt,name=cve_data_timestamp,json=CVE_data_timestamp,proto3" json:"cve_data_timestamp,omitempty"`
	CveItems            []*NvdMessage_CveItems `protobuf:"bytes,6,rep,name=cve_items,json=CVE_Items,proto3" json:"cve_items,omitempty"`
}

func (x *NvdMessage) Reset() {
	*x = NvdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage) ProtoMessage() {}

func (x *NvdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage.ProtoReflect.Descriptor instead.
func (*NvdMessage) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0}
}

func (x *NvdMessage) GetCveDataType() string {
	if x != nil {
		return x.CveDataType
	}
	return ""
}

func (x *NvdMessage) GetCveDataFormat() string {
	if x != nil {
		return x.CveDataFormat
	}
	return ""
}

func (x *NvdMessage) GetCveDataVersion() string {
	if x != nil {
		return x.CveDataVersion
	}
	return ""
}

func (x *NvdMessage) GetCveDataNumberOfCves() int32 {
	if x != nil {
		return x.CveDataNumberOfCves
	}
	return 0
}

func (x *NvdMessage) GetCveDataTimestamp() string {
	if x != nil {
		return x.CveDataTimestamp
	}
	return ""
}

func (x *NvdMessage) GetCveItems() []*NvdMessage_CveItems {
	if x != nil {
		return x.CveItems
	}
	return nil
}

type NvdMessage_CveDataMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,json=ID,proto3" json:"id,omitempty"`
	Assigner string `protobuf:"bytes,2,opt,name=assigner,json=ASSIGNER,proto3" json:"assigner,omitempty"`
}

func (x *NvdMessage_CveDataMeta) Reset() {
	*x = NvdMessage_CveDataMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_CveDataMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_CveDataMeta) ProtoMessage() {}

func (x *NvdMessage_CveDataMeta) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_CveDataMeta.ProtoReflect.Descriptor instead.
func (*NvdMessage_CveDataMeta) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NvdMessage_CveDataMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NvdMessage_CveDataMeta) GetAssigner() string {
	if x != nil {
		return x.Assigner
	}
	return ""
}

type NvdMessage_ProblemTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description []*NvdMessage_DescriptionData `protobuf:"bytes,1,rep,name=description,proto3" json:"description,omitempty"`
}

func (x *NvdMessage_ProblemTypeData) Reset() {
	*x = NvdMessage_ProblemTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_ProblemTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_ProblemTypeData) ProtoMessage() {}

func (x *NvdMessage_ProblemTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_ProblemTypeData.ProtoReflect.Descriptor instead.
func (*NvdMessage_ProblemTypeData) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NvdMessage_ProblemTypeData) GetDescription() []*NvdMessage_DescriptionData {
	if x != nil {
		return x.Description
	}
	return nil
}

type NvdMessage_ProblemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemTypeData []*NvdMessage_ProblemTypeData `protobuf:"bytes,1,rep,name=problem_type_data,json=problemtype_data,proto3" json:"problem_type_data,omitempty"`
}

func (x *NvdMessage_ProblemType) Reset() {
	*x = NvdMessage_ProblemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_ProblemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_ProblemType) ProtoMessage() {}

func (x *NvdMessage_ProblemType) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_ProblemType.ProtoReflect.Descriptor instead.
func (*NvdMessage_ProblemType) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 2}
}

func (x *NvdMessage_ProblemType) GetProblemTypeData() []*NvdMessage_ProblemTypeData {
	if x != nil {
		return x.ProblemTypeData
	}
	return nil
}

type NvdMessage_ReferenceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RefSource string   `protobuf:"bytes,3,opt,name=ref_source,json=refsource,proto3" json:"ref_source,omitempty"`
	Tags      []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *NvdMessage_ReferenceData) Reset() {
	*x = NvdMessage_ReferenceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_ReferenceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_ReferenceData) ProtoMessage() {}

func (x *NvdMessage_ReferenceData) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_ReferenceData.ProtoReflect.Descriptor instead.
func (*NvdMessage_ReferenceData) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 3}
}

func (x *NvdMessage_ReferenceData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NvdMessage_ReferenceData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvdMessage_ReferenceData) GetRefSource() string {
	if x != nil {
		return x.RefSource
	}
	return ""
}

func (x *NvdMessage_ReferenceData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type NvdMessage_References struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceData []*NvdMessage_ReferenceData `protobuf:"bytes,1,rep,name=reference_data,proto3" json:"reference_data,omitempty"`
}

func (x *NvdMessage_References) Reset() {
	*x = NvdMessage_References{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_References) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_References) ProtoMessage() {}

func (x *NvdMessage_References) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_References.ProtoReflect.Descriptor instead.
func (*NvdMessage_References) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 4}
}

func (x *NvdMessage_References) GetReferenceData() []*NvdMessage_ReferenceData {
	if x != nil {
		return x.ReferenceData
	}
	return nil
}

type NvdMessage_DescriptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang  string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NvdMessage_DescriptionData) Reset() {
	*x = NvdMessage_DescriptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_DescriptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_DescriptionData) ProtoMessage() {}

func (x *NvdMessage_DescriptionData) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_DescriptionData.ProtoReflect.Descriptor instead.
func (*NvdMessage_DescriptionData) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 5}
}

func (x *NvdMessage_DescriptionData) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *NvdMessage_DescriptionData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NvdMessage_Description struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescriptionData []*NvdMessage_DescriptionData `protobuf:"bytes,1,rep,name=description_data,proto3" json:"description_data,omitempty"`
}

func (x *NvdMessage_Description) Reset() {
	*x = NvdMessage_Description{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_Description) ProtoMessage() {}

func (x *NvdMessage_Description) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_Description.ProtoReflect.Descriptor instead.
func (*NvdMessage_Description) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 6}
}

func (x *NvdMessage_Description) GetDescriptionData() []*NvdMessage_DescriptionData {
	if x != nil {
		return x.DescriptionData
	}
	return nil
}

type NvdMessage_Cve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType    string                  `protobuf:"bytes,1,opt,name=data_type,proto3" json:"data_type,omitempty"`
	DataFormat  string                  `protobuf:"bytes,2,opt,name=data_format,proto3" json:"data_format,omitempty"`
	DataVersion string                  `protobuf:"bytes,3,opt,name=data_version,proto3" json:"data_version,omitempty"`
	CveDataMeta *NvdMessage_CveDataMeta `protobuf:"bytes,4,opt,name=cve_data_meta,json=CVE_data_meta,proto3" json:"cve_data_meta,omitempty"`
	ProblemType *NvdMessage_ProblemType `protobuf:"bytes,5,opt,name=problem_type,json=problemtype,proto3" json:"problem_type,omitempty"`
	References  *NvdMessage_References  `protobuf:"bytes,6,opt,name=references,proto3" json:"references,omitempty"`
	Description *NvdMessage_Description `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NvdMessage_Cve) Reset() {
	*x = NvdMessage_Cve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_Cve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_Cve) ProtoMessage() {}

func (x *NvdMessage_Cve) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_Cve.ProtoReflect.Descriptor instead.
func (*NvdMessage_Cve) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 7}
}

func (x *NvdMessage_Cve) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *NvdMessage_Cve) GetDataFormat() string {
	if x != nil {
		return x.DataFormat
	}
	return ""
}

func (x *NvdMessage_Cve) GetDataVersion() string {
	if x != nil {
		return x.DataVersion
	}
	return ""
}

func (x *NvdMessage_Cve) GetCveDataMeta() *NvdMessage_CveDataMeta {
	if x != nil {
		return x.CveDataMeta
	}
	return nil
}

func (x *NvdMessage_Cve) GetProblemType() *NvdMessage_ProblemType {
	if x != nil {
		return x.ProblemType
	}
	return nil
}

func (x *NvdMessage_Cve) GetReferences() *NvdMessage_References {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *NvdMessage_Cve) GetDescription() *NvdMessage_Description {
	if x != nil {
		return x.Description
	}
	return nil
}

type NvdMessage_CpeMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vulnerable            bool     `protobuf:"varint,1,opt,name=vulnerable,proto3" json:"vulnerable,omitempty"`
	Cpe23Uri              string   `protobuf:"bytes,2,opt,name=cpe23Uri,proto3" json:"cpe23Uri,omitempty"`
	CpeName               []string `protobuf:"bytes,3,rep,name=cpe_name,proto3" json:"cpe_name,omitempty"`
	VersionStartIncluding string   `protobuf:"bytes,4,opt,name=version_start_including,json=versionStartIncluding,proto3" json:"version_start_including,omitempty"`
	VersionStartExcluding string   `protobuf:"bytes,5,opt,name=version_start_excluding,json=versionStartExcluding,proto3" json:"version_start_excluding,omitempty"`
	VersionEndIncluding   string   `protobuf:"bytes,6,opt,name=version_end_including,json=versionEndIncluding,proto3" json:"version_end_including,omitempty"`
	VersionEndExcluding   string   `protobuf:"bytes,7,opt,name=version_end_excluding,json=versionEndExcluding,proto3" json:"version_end_excluding,omitempty"`
}

func (x *NvdMessage_CpeMatch) Reset() {
	*x = NvdMessage_CpeMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_CpeMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_CpeMatch) ProtoMessage() {}

func (x *NvdMessage_CpeMatch) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_CpeMatch.ProtoReflect.Descriptor instead.
func (*NvdMessage_CpeMatch) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 8}
}

func (x *NvdMessage_CpeMatch) GetVulnerable() bool {
	if x != nil {
		return x.Vulnerable
	}
	return false
}

func (x *NvdMessage_CpeMatch) GetCpe23Uri() string {
	if x != nil {
		return x.Cpe23Uri
	}
	return ""
}

func (x *NvdMessage_CpeMatch) GetCpeName() []string {
	if x != nil {
		return x.CpeName
	}
	return nil
}

func (x *NvdMessage_CpeMatch) GetVersionStartIncluding() string {
	if x != nil {
		return x.VersionStartIncluding
	}
	return ""
}

func (x *NvdMessage_CpeMatch) GetVersionStartExcluding() string {
	if x != nil {
		return x.VersionStartExcluding
	}
	return ""
}

func (x *NvdMessage_CpeMatch) GetVersionEndIncluding() string {
	if x != nil {
		return x.VersionEndIncluding
	}
	return ""
}

func (x *NvdMessage_CpeMatch) GetVersionEndExcluding() string {
	if x != nil {
		return x.VersionEndExcluding
	}
	return ""
}

type NvdMessage_Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Children []*NvdMessage_Nodes    `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	CpeMatch []*NvdMessage_CpeMatch `protobuf:"bytes,3,rep,name=cpe_match,proto3" json:"cpe_match,omitempty"`
	CpeName  []string               `protobuf:"bytes,4,rep,name=cpe_name,proto3" json:"cpe_name,omitempty"`
}

func (x *NvdMessage_Nodes) Reset() {
	*x = NvdMessage_Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_Nodes) ProtoMessage() {}

func (x *NvdMessage_Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_Nodes.ProtoReflect.Descriptor instead.
func (*NvdMessage_Nodes) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 9}
}

func (x *NvdMessage_Nodes) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *NvdMessage_Nodes) GetChildren() []*NvdMessage_Nodes {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *NvdMessage_Nodes) GetCpeMatch() []*NvdMessage_CpeMatch {
	if x != nil {
		return x.CpeMatch
	}
	return nil
}

func (x *NvdMessage_Nodes) GetCpeName() []string {
	if x != nil {
		return x.CpeName
	}
	return nil
}

type NvdMessage_Configurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CveDataVersion string              `protobuf:"bytes,1,opt,name=cve_data_version,json=CVE_data_version,proto3" json:"cve_data_version,omitempty"`
	Nodes          []*NvdMessage_Nodes `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NvdMessage_Configurations) Reset() {
	*x = NvdMessage_Configurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_Configurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_Configurations) ProtoMessage() {}

func (x *NvdMessage_Configurations) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_Configurations.ProtoReflect.Descriptor instead.
func (*NvdMessage_Configurations) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 10}
}

func (x *NvdMessage_Configurations) GetCveDataVersion() string {
	if x != nil {
		return x.CveDataVersion
	}
	return ""
}

func (x *NvdMessage_Configurations) GetNodes() []*NvdMessage_Nodes {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NvdMessage_CvssV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               string  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	VectorString          string  `protobuf:"bytes,2,opt,name=vector_string,json=vectorString,proto3" json:"vector_string,omitempty"`
	AttackVector          string  `protobuf:"bytes,3,opt,name=attack_vector,json=attackVector,proto3" json:"attack_vector,omitempty"`
	AttackComplexity      string  `protobuf:"bytes,4,opt,name=attack_complexity,json=attackComplexity,proto3" json:"attack_complexity,omitempty"`
	PrivilegesRequired    string  `protobuf:"bytes,5,opt,name=privileges_required,json=privilegesRequired,proto3" json:"privileges_required,omitempty"`
	UserInteraction       string  `protobuf:"bytes,6,opt,name=user_interaction,json=userInteraction,proto3" json:"user_interaction,omitempty"`
	Scope                 string  `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	ConfidentialityImpact string  `protobuf:"bytes,8,opt,name=confidentiality_impact,json=confidentialityImpact,proto3" json:"confidentiality_impact,omitempty"`
	IntegrityImpact       string  `protobuf:"bytes,9,opt,name=integrity_impact,json=integrityImpact,proto3" json:"integrity_impact,omitempty"`
	AvailabilityImpact    string  `protobuf:"bytes,10,opt,name=availability_impact,json=availabilityImpact,proto3" json:"availability_impact,omitempty"`
	BaseScore             float64 `protobuf:"fixed64,11,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`
	BaseSeverity          string  `protobuf:"bytes,12,opt,name=base_severity,json=baseSeverity,proto3" json:"base_severity,omitempty"`
}

func (x *NvdMessage_CvssV3) Reset() {
	*x = NvdMessage_CvssV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_CvssV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_CvssV3) ProtoMessage() {}

func (x *NvdMessage_CvssV3) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_CvssV3.ProtoReflect.Descriptor instead.
func (*NvdMessage_CvssV3) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 11}
}

func (x *NvdMessage_CvssV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetVectorString() string {
	if x != nil {
		return x.VectorString
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetAttackVector() string {
	if x != nil {
		return x.AttackVector
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetAttackComplexity() string {
	if x != nil {
		return x.AttackComplexity
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetPrivilegesRequired() string {
	if x != nil {
		return x.PrivilegesRequired
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetUserInteraction() string {
	if x != nil {
		return x.UserInteraction
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetConfidentialityImpact() string {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetIntegrityImpact() string {
	if x != nil {
		return x.IntegrityImpact
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetAvailabilityImpact() string {
	if x != nil {
		return x.AvailabilityImpact
	}
	return ""
}

func (x *NvdMessage_CvssV3) GetBaseScore() float64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *NvdMessage_CvssV3) GetBaseSeverity() string {
	if x != nil {
		return x.BaseSeverity
	}
	return ""
}

type NvdMessage_BaseMetricV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CvssV3              *NvdMessage_CvssV3 `protobuf:"bytes,1,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
	ExploitabilityScore float64            `protobuf:"fixed64,2,opt,name=exploitability_score,json=exploitabilityScore,proto3" json:"exploitability_score,omitempty"`
	ImpactScore         float64            `protobuf:"fixed64,3,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
}

func (x *NvdMessage_BaseMetricV3) Reset() {
	*x = NvdMessage_BaseMetricV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_BaseMetricV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_BaseMetricV3) ProtoMessage() {}

func (x *NvdMessage_BaseMetricV3) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_BaseMetricV3.ProtoReflect.Descriptor instead.
func (*NvdMessage_BaseMetricV3) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 12}
}

func (x *NvdMessage_BaseMetricV3) GetCvssV3() *NvdMessage_CvssV3 {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

func (x *NvdMessage_BaseMetricV3) GetExploitabilityScore() float64 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *NvdMessage_BaseMetricV3) GetImpactScore() float64 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

type NvdMessage_CvssV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               string  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	VersionString         string  `protobuf:"bytes,2,opt,name=version_string,json=vectorString,proto3" json:"version_string,omitempty"`
	AccessVector          string  `protobuf:"bytes,3,opt,name=access_vector,json=accessVector,proto3" json:"access_vector,omitempty"`
	AccessComplexity      string  `protobuf:"bytes,4,opt,name=access_complexity,json=accessComplexity,proto3" json:"access_complexity,omitempty"`
	Authentication        string  `protobuf:"bytes,5,opt,name=authentication,proto3" json:"authentication,omitempty"`
	ConfidentialityImpact string  `protobuf:"bytes,6,opt,name=confidentiality_impact,json=confidentialityImpact,proto3" json:"confidentiality_impact,omitempty"`
	IntegrityImpact       string  `protobuf:"bytes,7,opt,name=integrity_impact,json=integrityImpact,proto3" json:"integrity_impact,omitempty"`
	AvailabilityImpact    string  `protobuf:"bytes,8,opt,name=availability_impact,json=availabilityImpact,proto3" json:"availability_impact,omitempty"`
	BaseScore             float64 `protobuf:"fixed64,9,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`
}

func (x *NvdMessage_CvssV2) Reset() {
	*x = NvdMessage_CvssV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_CvssV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_CvssV2) ProtoMessage() {}

func (x *NvdMessage_CvssV2) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_CvssV2.ProtoReflect.Descriptor instead.
func (*NvdMessage_CvssV2) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 13}
}

func (x *NvdMessage_CvssV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NvdMessage_CvssV2) GetVersionString() string {
	if x != nil {
		return x.VersionString
	}
	return ""
}

func (x *NvdMessage_CvssV2) GetAccessVector() string {
	if x != nil {
		return x.AccessVector
	}
	return ""
}

func (x *NvdMessage_CvssV2) GetAccessComplexity() string {
	if x != nil {
		return x.AccessComplexity
	}
	return ""
}

func (x *NvdMessage_CvssV2) GetAuthentication() string {
	if x != nil {
		return x.Authentication
	}
	return ""
}

func (x *NvdMessage_CvssV2) GetConfidentialityImpact() string {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return ""
}

func (x *NvdMessage_CvssV2) GetIntegrityImpact() string {
	if x != nil {
		return x.IntegrityImpact
	}
	return ""
}

func (x *NvdMessage_CvssV2) GetAvailabilityImpact() string {
	if x != nil {
		return x.AvailabilityImpact
	}
	return ""
}

func (x *NvdMessage_CvssV2) GetBaseScore() float64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

type NvdMessage_BaseMetricV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CvssV2                  *NvdMessage_CvssV2 `protobuf:"bytes,1,opt,name=cvss_v2,json=cvssV2,proto3" json:"cvss_v2,omitempty"`
	Severity                string             `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	ExploitabilityScore     float64            `protobuf:"fixed64,3,opt,name=exploitability_score,json=exploitabilityScore,proto3" json:"exploitability_score,omitempty"`
	ImpactScore             float64            `protobuf:"fixed64,4,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	AcInsufInfo             bool               `protobuf:"varint,5,opt,name=ac_insuf_info,json=acInsufInfo,proto3" json:"ac_insuf_info,omitempty"`
	ObtainAllPrivilege      bool               `protobuf:"varint,6,opt,name=obtain_all_privilege,json=obtainAllPrivilege,proto3" json:"obtain_all_privilege,omitempty"`
	ObtainUserPrivilege     bool               `protobuf:"varint,7,opt,name=obtain_user_privilege,json=obtainUserPrivilege,proto3" json:"obtain_user_privilege,omitempty"`
	ObtainOtherPrivilege    bool               `protobuf:"varint,8,opt,name=obtain_other_privilege,json=obtainOtherPrivilege,proto3" json:"obtain_other_privilege,omitempty"`
	UserInteractionRequired bool               `protobuf:"varint,9,opt,name=user_interaction_required,json=userInteractionRequired,proto3" json:"user_interaction_required,omitempty"`
}

func (x *NvdMessage_BaseMetricV2) Reset() {
	*x = NvdMessage_BaseMetricV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_BaseMetricV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_BaseMetricV2) ProtoMessage() {}

func (x *NvdMessage_BaseMetricV2) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_BaseMetricV2.ProtoReflect.Descriptor instead.
func (*NvdMessage_BaseMetricV2) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 14}
}

func (x *NvdMessage_BaseMetricV2) GetCvssV2() *NvdMessage_CvssV2 {
	if x != nil {
		return x.CvssV2
	}
	return nil
}

func (x *NvdMessage_BaseMetricV2) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *NvdMessage_BaseMetricV2) GetExploitabilityScore() float64 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *NvdMessage_BaseMetricV2) GetImpactScore() float64 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *NvdMessage_BaseMetricV2) GetAcInsufInfo() bool {
	if x != nil {
		return x.AcInsufInfo
	}
	return false
}

func (x *NvdMessage_BaseMetricV2) GetObtainAllPrivilege() bool {
	if x != nil {
		return x.ObtainAllPrivilege
	}
	return false
}

func (x *NvdMessage_BaseMetricV2) GetObtainUserPrivilege() bool {
	if x != nil {
		return x.ObtainUserPrivilege
	}
	return false
}

func (x *NvdMessage_BaseMetricV2) GetObtainOtherPrivilege() bool {
	if x != nil {
		return x.ObtainOtherPrivilege
	}
	return false
}

func (x *NvdMessage_BaseMetricV2) GetUserInteractionRequired() bool {
	if x != nil {
		return x.UserInteractionRequired
	}
	return false
}

type NvdMessage_Impact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseMetricV3 *NvdMessage_BaseMetricV3 `protobuf:"bytes,1,opt,name=base_metric_v3,json=baseMetricV3,proto3" json:"base_metric_v3,omitempty"`
	BaseMetricV2 *NvdMessage_BaseMetricV2 `protobuf:"bytes,2,opt,name=base_metric_v2,json=baseMetricV2,proto3" json:"base_metric_v2,omitempty"`
}

func (x *NvdMessage_Impact) Reset() {
	*x = NvdMessage_Impact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_Impact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_Impact) ProtoMessage() {}

func (x *NvdMessage_Impact) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_Impact.ProtoReflect.Descriptor instead.
func (*NvdMessage_Impact) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 15}
}

func (x *NvdMessage_Impact) GetBaseMetricV3() *NvdMessage_BaseMetricV3 {
	if x != nil {
		return x.BaseMetricV3
	}
	return nil
}

func (x *NvdMessage_Impact) GetBaseMetricV2() *NvdMessage_BaseMetricV2 {
	if x != nil {
		return x.BaseMetricV2
	}
	return nil
}

type NvdMessage_CveItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cve              *NvdMessage_Cve            `protobuf:"bytes,1,opt,name=cve,proto3" json:"cve,omitempty"`
	Configurations   *NvdMessage_Configurations `protobuf:"bytes,2,opt,name=configurations,proto3" json:"configurations,omitempty"`
	Impact           *NvdMessage_Impact         `protobuf:"bytes,3,opt,name=impact,proto3" json:"impact,omitempty"`
	PublishedDate    string                     `protobuf:"bytes,4,opt,name=published_date,json=publishedDate,proto3" json:"published_date,omitempty"`
	LastModifiedData string                     `protobuf:"bytes,5,opt,name=last_modified_data,json=lastModifiedDate,proto3" json:"last_modified_data,omitempty"`
}

func (x *NvdMessage_CveItems) Reset() {
	*x = NvdMessage_CveItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nvd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvdMessage_CveItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvdMessage_CveItems) ProtoMessage() {}

func (x *NvdMessage_CveItems) ProtoReflect() protoreflect.Message {
	mi := &file_nvd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvdMessage_CveItems.ProtoReflect.Descriptor instead.
func (*NvdMessage_CveItems) Descriptor() ([]byte, []int) {
	return file_nvd_proto_rawDescGZIP(), []int{0, 16}
}

func (x *NvdMessage_CveItems) GetCve() *NvdMessage_Cve {
	if x != nil {
		return x.Cve
	}
	return nil
}

func (x *NvdMessage_CveItems) GetConfigurations() *NvdMessage_Configurations {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *NvdMessage_CveItems) GetImpact() *NvdMessage_Impact {
	if x != nil {
		return x.Impact
	}
	return nil
}

func (x *NvdMessage_CveItems) GetPublishedDate() string {
	if x != nil {
		return x.PublishedDate
	}
	return ""
}

func (x *NvdMessage_CveItems) GetLastModifiedData() string {
	if x != nil {
		return x.LastModifiedData
	}
	return ""
}

var File_nvd_proto protoreflect.FileDescriptor

var file_nvd_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x76, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6e, 0x76, 0x64, 0x22, 0xc6, 0x1d, 0x0a, 0x0a, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x56, 0x45,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x76,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x56, 0x45, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x43, 0x56, 0x45, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x17, 0x63, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x43, 0x56, 0x45, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x43, 0x56, 0x45, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x76, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x56, 0x45, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x76, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x76, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x09, 0x43, 0x56, 0x45,
	0x5f, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x52, 0x1a, 0x59, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x60, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76,
	0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x68,
	0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x58, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x5f, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0xfb, 0x02, 0x0a, 0x03, 0x43, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d,
	0x63, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e,
	0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x43, 0x56, 0x45, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xba,
	0x02, 0x0a, 0x08, 0x43, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x70, 0x65, 0x32, 0x33, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x70, 0x65, 0x32, 0x33, 0x55, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0xb4, 0x01, 0x0a, 0x05,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e,
	0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x63, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x6e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x43, 0x56, 0x45, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x1a, 0xe2, 0x03, 0x0a, 0x06, 0x43, 0x76, 0x73, 0x73, 0x56, 0x33, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x2f,
	0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x9a, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x33, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73,
	0x5f, 0x76, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x76, 0x73, 0x73, 0x56, 0x33, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x33, 0x12, 0x31,
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0xf4, 0x02, 0x0a, 0x06, 0x43, 0x76, 0x73, 0x73, 0x56, 0x32, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xb2, 0x03, 0x0a, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x76, 0x73, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x56, 0x32, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73,
	0x56, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x31,
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x66,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x49,
	0x6e, 0x73, 0x75, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62,
	0x74, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x1a, 0x9a, 0x01, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x33, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e,
	0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x33, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x56, 0x33, 0x12, 0x47, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x1a, 0x8e, 0x02,
	0x0a, 0x09, 0x43, 0x76, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x63,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x76, 0x65, 0x52, 0x03, 0x63, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e, 0x4e, 0x76, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x2e,
	0x4e, 0x76, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x42, 0x1c,
	0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6b, 0x61,
	0x75, 0x74, 0x7a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x76, 0x64, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nvd_proto_rawDescOnce sync.Once
	file_nvd_proto_rawDescData = file_nvd_proto_rawDesc
)

func file_nvd_proto_rawDescGZIP() []byte {
	file_nvd_proto_rawDescOnce.Do(func() {
		file_nvd_proto_rawDescData = protoimpl.X.CompressGZIP(file_nvd_proto_rawDescData)
	})
	return file_nvd_proto_rawDescData
}

var file_nvd_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_nvd_proto_goTypes = []interface{}{
	(*NvdMessage)(nil),                 // 0: protonvd.NvdMessage
	(*NvdMessage_CveDataMeta)(nil),     // 1: protonvd.NvdMessage.CveDataMeta
	(*NvdMessage_ProblemTypeData)(nil), // 2: protonvd.NvdMessage.ProblemTypeData
	(*NvdMessage_ProblemType)(nil),     // 3: protonvd.NvdMessage.ProblemType
	(*NvdMessage_ReferenceData)(nil),   // 4: protonvd.NvdMessage.ReferenceData
	(*NvdMessage_References)(nil),      // 5: protonvd.NvdMessage.References
	(*NvdMessage_DescriptionData)(nil), // 6: protonvd.NvdMessage.DescriptionData
	(*NvdMessage_Description)(nil),     // 7: protonvd.NvdMessage.Description
	(*NvdMessage_Cve)(nil),             // 8: protonvd.NvdMessage.Cve
	(*NvdMessage_CpeMatch)(nil),        // 9: protonvd.NvdMessage.CpeMatch
	(*NvdMessage_Nodes)(nil),           // 10: protonvd.NvdMessage.Nodes
	(*NvdMessage_Configurations)(nil),  // 11: protonvd.NvdMessage.Configurations
	(*NvdMessage_CvssV3)(nil),          // 12: protonvd.NvdMessage.CvssV3
	(*NvdMessage_BaseMetricV3)(nil),    // 13: protonvd.NvdMessage.BaseMetricV3
	(*NvdMessage_CvssV2)(nil),          // 14: protonvd.NvdMessage.CvssV2
	(*NvdMessage_BaseMetricV2)(nil),    // 15: protonvd.NvdMessage.BaseMetricV2
	(*NvdMessage_Impact)(nil),          // 16: protonvd.NvdMessage.Impact
	(*NvdMessage_CveItems)(nil),        // 17: protonvd.NvdMessage.Cve_items
}
var file_nvd_proto_depIdxs = []int32{
	17, // 0: protonvd.NvdMessage.cve_items:type_name -> protonvd.NvdMessage.Cve_items
	6,  // 1: protonvd.NvdMessage.ProblemTypeData.description:type_name -> protonvd.NvdMessage.DescriptionData
	2,  // 2: protonvd.NvdMessage.ProblemType.problem_type_data:type_name -> protonvd.NvdMessage.ProblemTypeData
	4,  // 3: protonvd.NvdMessage.References.reference_data:type_name -> protonvd.NvdMessage.ReferenceData
	6,  // 4: protonvd.NvdMessage.Description.description_data:type_name -> protonvd.NvdMessage.DescriptionData
	1,  // 5: protonvd.NvdMessage.Cve.cve_data_meta:type_name -> protonvd.NvdMessage.CveDataMeta
	3,  // 6: protonvd.NvdMessage.Cve.problem_type:type_name -> protonvd.NvdMessage.ProblemType
	5,  // 7: protonvd.NvdMessage.Cve.references:type_name -> protonvd.NvdMessage.References
	7,  // 8: protonvd.NvdMessage.Cve.description:type_name -> protonvd.NvdMessage.Description
	10, // 9: protonvd.NvdMessage.Nodes.children:type_name -> protonvd.NvdMessage.Nodes
	9,  // 10: protonvd.NvdMessage.Nodes.cpe_match:type_name -> protonvd.NvdMessage.CpeMatch
	10, // 11: protonvd.NvdMessage.Configurations.nodes:type_name -> protonvd.NvdMessage.Nodes
	12, // 12: protonvd.NvdMessage.BaseMetricV3.cvss_v3:type_name -> protonvd.NvdMessage.CvssV3
	14, // 13: protonvd.NvdMessage.BaseMetricV2.cvss_v2:type_name -> protonvd.NvdMessage.CvssV2
	13, // 14: protonvd.NvdMessage.Impact.base_metric_v3:type_name -> protonvd.NvdMessage.BaseMetricV3
	15, // 15: protonvd.NvdMessage.Impact.base_metric_v2:type_name -> protonvd.NvdMessage.BaseMetricV2
	8,  // 16: protonvd.NvdMessage.Cve_items.cve:type_name -> protonvd.NvdMessage.Cve
	11, // 17: protonvd.NvdMessage.Cve_items.configurations:type_name -> protonvd.NvdMessage.Configurations
	16, // 18: protonvd.NvdMessage.Cve_items.impact:type_name -> protonvd.NvdMessage.Impact
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_nvd_proto_init() }
func file_nvd_proto_init() {
	if File_nvd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nvd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_CveDataMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_ProblemTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_ProblemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_ReferenceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_References); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_DescriptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_Description); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_Cve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_CpeMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_Configurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_CvssV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_BaseMetricV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_CvssV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_BaseMetricV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_Impact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nvd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvdMessage_CveItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nvd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nvd_proto_goTypes,
		DependencyIndexes: file_nvd_proto_depIdxs,
		MessageInfos:      file_nvd_proto_msgTypes,
	}.Build()
	File_nvd_proto = out.File
	file_nvd_proto_rawDesc = nil
	file_nvd_proto_goTypes = nil
	file_nvd_proto_depIdxs = nil
}
